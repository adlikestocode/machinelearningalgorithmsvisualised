model <- lm(petal_length ~ sepal_length, data = iris)
# View the coefficients of the model (intercept and slope)
print(coefficients(model))
# Define the cost function (Mean Squared Error)
cost_function <- function(theta0, theta1, x, y) {
predictions <- theta0 + theta1 * x
return(mean((predictions - y)^2, na.rm = TRUE))  # Ensure NA values are handled
}
# Create a grid of theta0 and theta1 values
theta0_values <- seq(-10, 10, length.out = 100)  # Increased resolution
theta1_values <- seq(-10, 10, length.out = 100)
# Ensure no NA or missing values in the relevant columns
x <- iris$sepal_length
y <- iris$petal_length
# Calculate cost function values for each combination of theta0 and theta1
cost_matrix <- outer(theta0_values, theta1_values, Vectorize(function(t0, t1) cost_function(t0, t1, x, y)))
# Check the range of cost values to see if they're reasonable
print(summary(as.vector(cost_matrix)))
# Create a dataframe for plotting the cost function heatmap
cost_df <- expand.grid(theta0 = theta0_values, theta1 = theta1_values)
cost_df$cost <- as.vector(cost_matrix)
# Check the structure of cost_df and print the first few rows
print(head(cost_df))
# Normalize the cost values to a smaller range for better plotting
cost_df$normalized_cost <- (cost_df$cost - min(cost_df$cost)) / (max(cost_df$cost) - min(cost_df$cost))
# Check the structure of the cost_df to confirm it's okay
print(head(cost_df))
# Create the 3D surface plot for the cost function
fig_cost_3d <- plot_ly(
data = cost_df,
x = ~theta0,
y = ~theta1,
z = ~cost,
type = 'surface'
) %>%
layout(
scene = list(
xaxis = list(title = 'Theta0'),
yaxis = list(title = 'Theta1'),
zaxis = list(title = 'Cost')
)
)
# Display the 3D surface plot
fig_cost_3d
# Create a 3D scatter plot with the linear regression model predictions
sepal_length_grid <- seq(min(iris$sepal_length), max(iris$sepal_length), length.out = 100)
petal_length_pred <- predict(model, newdata = data.frame(sepal_length = sepal_length_grid))
fig_regression_3d <- plot_ly() %>%
add_trace(
x = iris$sepal_length, y = iris$petal_length, z = iris$petal_length,
type = 'scatter3d', mode = 'markers', marker = list(color = 'blue')
) %>%
add_trace(
x = sepal_length_grid, y = petal_length_pred, z = petal_length_pred,
type = 'scatter3d', mode = 'lines', line = list(color = 'red')
) %>%
layout(
scene = list(
xaxis = list(title = 'Sepal Length'),
yaxis = list(title = 'Predicted Petal Length'),
zaxis = list(title = 'Actual Petal Length')
)
)
# Display the 3D scatter plot with regression line
fig_regression_3d
# Display the 3D scatter plot with regression line
fig_regression_3d
# Load the libraries
library(ggplot2)
library(plotly)
library(viridis)
# Load the iris dataset (or your own CSV file)
iris <- read.csv("iris.csv", header = TRUE, sep = ",")
head(iris)  # To check the first few rows of the data
# Fit the linear regression model
model <- lm(petal_length ~ sepal_length, data = iris)
# View the coefficients of the model (intercept and slope)
print(coefficients(model))
# Define the cost function (Mean Squared Error)
cost_function <- function(theta0, theta1, x, y) {
predictions <- theta0 + theta1 * x
return(mean((predictions - y)^2, na.rm = TRUE))  # Ensure NA values are handled
}
# Create a grid of theta0 and theta1 values
theta0_values <- seq(-10, 10, length.out = 100)  # Increased resolution
theta1_values <- seq(-10, 10, length.out = 100)
# Ensure no NA or missing values in the relevant columns
x <- iris$sepal_length
y <- iris$petal_length
# Calculate cost function values for each combination of theta0 and theta1
cost_matrix <- outer(theta0_values, theta1_values, Vectorize(function(t0, t1) cost_function(t0, t1, x, y)))
# Check the range of cost values to see if they're reasonable
print(summary(as.vector(cost_matrix)))
# Create a dataframe for plotting the cost function heatmap
cost_df <- expand.grid(theta0 = theta0_values, theta1 = theta1_values)
cost_df$cost <- as.vector(cost_matrix)
# Check the structure of cost_df and print the first few rows
print(head(cost_df))
# Normalize the cost values to a smaller range for better plotting
cost_df$normalized_cost <- (cost_df$cost - min(cost_df$cost)) / (max(cost_df$cost) - min(cost_df$cost))
# Check the structure of the cost_df to confirm it's okay
print(head(cost_df))
# Create the 3D heatmap for the cost function
fig_cost_3d <- plot_ly(
data = cost_df,
x = ~theta0,
y = ~theta1,
z = ~cost,
type = 'surface',
colors = viridis::viridis(256)
) %>%
layout(
scene = list(
xaxis = list(title = 'Theta0'),
yaxis = list(title = 'Theta1'),
zaxis = list(title = 'Cost')
)
)
# Display the 3D heatmap surface plot
fig_cost_3d
# Load the libraries
library(ggplot2)
library(plotly)
library(viridis)
# Load the iris dataset (or your own CSV file)
iris <- read.csv("iris.csv", header = TRUE, sep = ",")
head(iris)  # To check the first few rows of the data
# Fit the linear regression model
model <- lm(petal_length ~ sepal_length, data = iris)
# View the coefficients of the model (intercept and slope)
print(coefficients(model))
# Define the cost function (Mean Squared Error)
cost_function <- function(theta0, theta1, x, y) {
predictions <- theta0 + theta1 * x
return(mean((predictions - y)^2, na.rm = TRUE))  # Ensure NA values are handled
}
# Create a grid of theta0 and theta1 values
theta0_values <- seq(-10, 10, length.out = 100)  # Increased resolution
theta1_values <- seq(-10, 10, length.out = 100)
# Ensure no NA or missing values in the relevant columns
x <- iris$sepal_length
y <- iris$petal_length
# Calculate cost function values for each combination of theta0 and theta1
cost_matrix <- outer(theta0_values, theta1_values, Vectorize(function(t0, t1) cost_function(t0, t1, x, y)))
# Check the range of cost values to see if they're reasonable
print(summary(as.vector(cost_matrix)))
# Create a dataframe for plotting the cost function heatmap
cost_df <- expand.grid(theta0 = theta0_values, theta1 = theta1_values)
cost_df$cost <- as.vector(cost_matrix)
# Check the structure of cost_df and print the first few rows
print(head(cost_df))
# Normalize the cost values to a smaller range for better plotting
cost_df$normalized_cost <- (cost_df$cost - min(cost_df$cost)) / (max(cost_df$cost) - min(cost_df$cost))
# Check the structure of the cost_df to confirm it's okay
print(head(cost_df))
# Create the 3D surface plot of cost function vs. theta0 and theta1
fig_cost_3d <- plot_ly(
data = cost_df,
x = ~theta0,
y = ~theta1,
z = ~cost,
type = 'surface',
colors = viridis::viridis(256)
) %>%
layout(
scene = list(
xaxis = list(title = 'Theta0'),
yaxis = list(title = 'Theta1'),
zaxis = list(title = 'Cost')
)
)
# Display the 3D surface plot
fig_cost_3d
# Create the 2D heatmap (contour plot) of the cost function
ggplot(cost_df, aes(x = theta0, y = theta1, fill = normalized_cost)) +
geom_tile() +
scale_fill_gradient2(low = "blue", mid = "yellow", high = "red", midpoint = 0.5) +
labs(title = 'Cost Function Heatmap (2D)', x = 'Theta 0', y = 'Theta 1', fill = 'Normalized Cost') +
theme_minimal()  # Adjust theme for better visualization
# Load the iris dataset (or your own CSV file)
iris <- read.csv("iris.csv", header = TRUE, sep = ",")
head(iris)  # To check the first few rows of the data
# Fit the linear regression model
model <- lm(petal_length ~ sepal_length, data = iris)
# View the coefficients of the model (intercept and slope)
print(coefficients(model))
# Define the cost function (Mean Squared Error)
cost_function <- function(theta0, theta1, x, y) {
predictions <- theta0 + theta1 * x
return(mean((predictions - y)^2, na.rm = TRUE))  # Ensure NA values are handled
}
# Create a grid of theta0 and theta1 values
theta0_values <- seq(-10, 10, length.out = 100)  # Increased resolution
theta1_values <- seq(-10, 10, length.out = 100)
# Ensure no NA or missing values in the relevant columns
x <- iris$sepal_length
y <- iris$petal_length
# Calculate cost function values for each combination of theta0 and theta1
cost_matrix <- outer(theta0_values, theta1_values, Vectorize(function(t0, t1) cost_function(t0, t1, x, y)))
# Create a dataframe for plotting the cost function
cost_df <- expand.grid(theta0 = theta0_values, theta1 = theta1_values)
cost_df$cost <- as.vector(cost_matrix)
# Normalize the cost values to a smaller range for better plotting
cost_df$normalized_cost <- (cost_df$cost - min(cost_df$cost)) / (max(cost_df$cost) - min(cost_df$cost))
# Return cost_df to be used for plotting
return(cost_df)
library(plotly)
## The following object is masked from 'package:graphics':
##
##     layout
# plot_ly() tries to create a sensible plot based on the information you
# give it. If you don't provide a trace type, plot_ly() will infer one.
fig_cost <- plot_ly(
data = cost_df,
x = ~theta0,         # x-axis corresponds to theta0
y = ~theta1,         # y-axis corresponds to theta1
z = ~cost,           # z-axis corresponds to the cost values
type = 'surface'     # Specify the plot type as surface
) %>%
layout(
scene = list(
xaxis = list(title = 'Theta0'),  # Label for the x-axis
yaxis = list(title = 'Theta1'),  # Label for the y-axis
zaxis = list(title = 'Cost')     # Label for the z-axis
)
)
fig_cost  # Display the surface plot
plot_ly(
data = cost_df,
x = ~theta0,
y = ~theta1,
z = ~cost,
type = 'surface'
) %>%
layout(
title = "Cost Function Surface",
scene = list(
xaxis = list(title = 'Theta0'),
yaxis = list(title = 'Theta1'),
zaxis = list(title = 'Cost')
)
)
library(plotly)
# Use plot_ly to display the table
fig_table <- plot_ly(
type = 'table',
header = list(values = c('Theta0', 'Theta1', 'Cost')),
cells = list(values = list(cost_df$theta0, cost_df$theta1, cost_df$cost))
)
# Display the table
fig_table
library(plotly)
# Use plot_ly to display the table
fig_table <- plot_ly(
type = 'table',
header = list(values = c('Theta0', 'Theta1', 'Cost')),
cells = list(values = list(cost_df$theta0, cost_df$theta1, cost_df$cost))
)
# Display the table
fig_table
class(theta0_values)
class(theta0_values)
class(theta1_values)
class(cost)
class(theta1_values)
class(cost)
class(cost_df)
class(cost_matrix)
class(petal_length)
# Check class of iris dataset
print(class(iris))  # Expected output: "data.frame"
# Check class of the model
print(class(model))  # Expected output: "lm"
# Check class of the coefficients
print(class(coefficients(model)))  # Expected output: "numeric"
# Check class of cost_function
print(class(cost_function))  # Expected output: "function"
# Check class of theta0_values and theta1_values
print(class(theta0_values))  # Expected output: "numeric"
print(class(theta1_values))  # Expected output: "numeric"
# Check class of x and y
print(class(x))  # Expected output: "numeric"
print(class(y))  # Expected output: "numeric"
# Check class of cost_matrix
print(class(cost_matrix))  # Expected output: "matrix"
# Check class of cost_df
print(class(cost_df))  # Expected output: "data.frame"
# Check class of normalized_cost
print(class(cost_df$normalized_cost))  # Expected output: "numeric"
# Check class of plot_ly
print(class(plotly))  # Expected output: "package:plotly"
# Check class of fig_table
print(class(fig_table))  # Expected output: "plotly" (or a similar plotly object class)
cost
cost_df$normalized_cost
# Using a dataframe:
plot_ly (
type = ‘surface’ ,
# Extract the values of theta0, theta1, and cost into separate variables
hx <- cost_df$theta0  # Extract theta0 values into hx
hy <- cost_df$theta1  # Extract theta1 values into hy
hz <- cost_df$cost    # Extract cost values into hz
# Print the variables to verify
print(hx)  # Values of theta0
print(hy)  # Values of theta1
print(hz)  # Values of cost
fig <- plot_ly(
type = 'surface',  # Set plot type to surface
x = ~hx,           # Assign hx (theta0 values) to x-axis
y = ~hy,           # Assign hy (theta1 values) to y-axis
z = ~hz,           # Assign hz (cost values) to z-axis
colorscale = 'Viridis'  # Optional: use a color scale for better visualization
)
# Show the plot
fig
fig <- plot_ly(
type = 'volcano',  # Set plot type to surface
x = ~hx,           # Assign hx (theta0 values) to x-axis
y = ~hy,           # Assign hy (theta1 values) to y-axis
z = ~hz,           # Assign hz (cost values) to z-axis
colorscale = 'Viridis'  # Optional: use a color scale for better visualization
)
# Show the plot
fig
fig <- plot_ly(
type = 'surface',  # Set plot type to surface
x = ~hx,           # Assign hx (theta0 values) to x-axis
y = ~hy,           # Assign hy (theta1 values) to y-axis
z = ~hz,           # Assign hz (cost values) to z-axis
colorscale = 'Viridis'  # Optional: use a color scale for better visualization
)
# Show the plot
fig
trace0= Surface(hx=df3['x'], hy=df3['y'], hz=df3['z'])
data=[trace0]
fig=dict(data=data)
plot(fig)
# Show the plot
fig
library(reshape2)
install.packages(reshape2)
# Graph Resolution
graph_reso = 0.05
# Set up Axis
axis_x = seq(min(hx), max(hx), by = graph_reso)  # Use hx for theta0 (x-axis)
axis_y = seq(min(hy), max(hy), by = graph_reso)  # Use hy for theta1 (y-axis)
# Sample points for surface plot (we'll predict cost values for each (theta0, theta1) pair)
lm_surface = expand.grid(theta0 = axis_x, theta1 = axis_y, KEEP.OUT.ATTRS = F)
# Now, instead of fitting a linear model, we use the cost matrix (which is already precomputed)
# You can simulate or use a similar cost function here if needed.
lm_surface$cost = as.vector(cost_matrix)  # Use the precomputed cost values for the z-axis
# Convert the cost matrix into a format suitable for plotly (reshaping into a grid format)
lm_surface = acast(lm_surface, theta1 ~ theta0, value.var = "cost")
# Plot the 3D scatter plot with the points (hx, hy, hz)
p_1 = plot_ly(
x = hx, y = hy, z = hz,
type = "scatter3d",
mode = "markers"
) %>% layout(title = "Cost Function Surface (theta0 vs theta1)")
# Add the surface plot to show the cost function surface
p_1 = add_trace(
p = p_1,
z = lm_surface,
x = axis_x,
y = axis_y,
type = "surface"
)
# Display the plot
p_1
install.packages("reshape2")
library(reshape2)
# Graph Resolution
graph_reso = 0.05
# Set up Axis
axis_x = seq(min(hx), max(hx), by = graph_reso)  # Use hx for theta0 (x-axis)
axis_y = seq(min(hy), max(hy), by = graph_reso)  # Use hy for theta1 (y-axis)
# Sample points for surface plot (we'll predict cost values for each (theta0, theta1) pair)
lm_surface = expand.grid(theta0 = axis_x, theta1 = axis_y, KEEP.OUT.ATTRS = F)
# Now, instead of fitting a linear model, we use the cost matrix (which is already precomputed)
# You can simulate or use a similar cost function here if needed.
lm_surface$cost = as.vector(cost_matrix)  # Use the precomputed cost values for the z-axis
# Convert the cost matrix into a format suitable for plotly (reshaping into a grid format)
lm_surface = acast(lm_surface, theta1 ~ theta0, value.var = "cost")
# Plot the 3D scatter plot with the points (hx, hy, hz)
p_1 = plot_ly(
x = hx, y = hy, z = hz,
type = "scatter3d",
mode = "markers"
) %>% layout(title = "Cost Function Surface (theta0 vs theta1)")
# Add the surface plot to show the cost function surface
p_1 = add_trace(
p = p_1,
z = lm_surface,
x = axis_x,
y = axis_y,
type = "surface"
)
# Display the plot
p_1
library(reshape2)
# Graph Resolution
graph_reso = 0.05
# Set up Axis
axis_x = seq(min(hx), max(hx), by = graph_reso)  # Use hx for theta0 (x-axis)
axis_y = seq(min(hy), max(hy), by = graph_reso)  # Use hy for theta1 (y-axis)
# Sample points for surface plot (we'll predict cost values for each (theta0, theta1) pair)
lm_surface = expand.grid(theta0 = axis_x, theta1 = axis_y, KEEP.OUT.ATTRS = F)
# Ensure that the cost_matrix is correctly aligned
# If cost_matrix is computed as a matrix from the theta0 and theta1 values, ensure it's reshaped correctly
if(length(cost_matrix) == nrow(lm_surface)) {
lm_surface$cost = as.vector(cost_matrix)  # Use the precomputed cost values for the z-axis
} else {
stop("Mismatch in the length of cost_matrix and lm_surface dimensions.")
}
# Reshape the data into a format suitable for plotly
lm_surface_matrix = acast(lm_surface, theta1 ~ theta0, value.var = "cost")
# Plot the 3D scatter plot with the points (hx, hy, hz)
p_1 = plot_ly(
x = hx, y = hy, z = hz,
type = "scatter3d",
mode = "markers"
) %>% layout(title = "Cost Function Surface (theta0 vs theta1)")
# Add the surface plot to show the cost function surface
p_1 = add_trace(
p = p_1,
z = lm_surface_matrix,  # The reshaped cost data
x = axis_x,
y = axis_y,
type = "surface"  # No 'mode' here for surface plot
)
# Display the plot
p_1
# Reshape the data into a format suitable for plotly
lm_surface_matrix = acast(lm_surface, theta1 ~ theta0, value.var = "cost")
library(reshape2)
# Graph Resolution
graph_reso = 0.05
# Set up Axis
axis_x = seq(min(hx), max(hx), by = graph_reso)  # Use hx for theta0 (x-axis)
axis_y = seq(min(hy), max(hy), by = graph_reso)  # Use hy for theta1 (y-axis)
# Sample points for surface plot (we'll predict cost values for each (theta0, theta1) pair)
lm_surface = expand.grid(theta0 = axis_x, theta1 = axis_y, KEEP.OUT.ATTRS = F)
# Ensure that the cost_matrix is correctly aligned
# If cost_matrix is computed as a matrix from the theta0 and theta1 values, ensure it's reshaped correctly
if(length(cost_matrix) == nrow(lm_surface)) {
lm_surface$cost = as.vector(cost_matrix)  # Use the precomputed cost values for the z-axis
} else {
stop("Mismatch in the length of cost_matrix and lm_surface dimensions.")
}
# Reshape the data into a format suitable for plotly
lm_surface_matrix = acast(lm_surface, theta1 ~ theta0, value.var = "cost")
# Plot the 3D scatter plot with the points (hx, hy, hz)
p_1 = plot_ly(
x = hx, y = hy, z = hz,
type = "scatter3d",
mode = "markers"
) %>% layout(title = "Cost Function Surface (theta0 vs theta1)")
# Add the surface plot to show the cost function surface
p_1 = add_trace(
p = p_1,
z = lm_surface_matrix,  # The reshaped cost data
x = axis_x,
y = axis_y,
type = "surface"  # No 'mode' here for surface plot
)
# Display the plot
p_1
install.packages('tidyr')
install.packages("tidyr")
library(tidyr)
# Reshape the data into a format suitable for plotly
lm_surface_matrix <- lm_surface %>%
pivot_wider(names_from = theta0, values_from = cost)  # Reshape using pivot_wider
# Convert to a matrix format for the surface plot
lm_surface_matrix <- as.matrix(lm_surface_matrix[, -1])  # Remove the theta1 column (it's used as the row names)
# Plot the 3D scatter plot with the points (hx, hy, hz)
p_1 = plot_ly(
x = hx, y = hy, z = hz,
type = "scatter3d",
mode = "markers"
) %>% layout(title = "Cost Function Surface (theta0 vs theta1)")
# Add the surface plot to show the cost function surface
p_1 = add_trace(
p = p_1,
z = lm_surface_matrix,  # The reshaped cost data
x = axis_x,
y = axis_y,
type = "surface"  # No 'mode' here for surface plot
)
# Display the plot
p_1
# Reshape the data into a format suitable for plotly
lm_surface_matrix <- lm_surface %>%
pivot_wider(names_from = theta0, values_from = cost)  # Reshape using pivot_wider
# Convert to a matrix format for the surface plot
lm_surface_matrix <- as.matrix(lm_surface_matrix[, -1])  # Remove the theta1 column (it's used as the row names)
# Plot the 3D scatter plot with the points (hx, hy, hz)
p_1 = plot_ly(
x = hx, y = hy, z = hz,
type = "scatter3d",
mode = "markers"
) %>% layout(title = "Cost Function Surface (theta0 vs theta1)")
# Add the surface plot to show the cost function surface
p_1 = add_trace(
p = p_1,
z = lm_surface_matrix,  # The reshaped cost data
x = axis_x,
y = axis_y,
type = "surface"  # No 'mode' here for surface plot
)
# Display the plot
p_1
